[project]
name = "hands-scaphoid"
version = "2025.0.3"
description = "Secure shell execution context manager *for Python with ease*"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Andreas Felix Häberle", email = "felix@42sol.eu"},
]

# ---yaml
# File:
#    name: pyproject.toml
#    uuid: {{generated-uuid}}
#    date: {{modification date, YYYY-MM-DD}}
#
# Description:
#    Python library configuration
#
# Project:
#    name: hands_scaphoid
#    uuid: 2945ba3b-2d66-4dff-b898-672c386f03f4
#    url: https://github.com/42sol-eu/hands_scaphoid
#
# Authors: ["Andreas Felix Häberle <felix@42sol.eu>"]
#
# Abbreviations:
# - {{abbreviation}}[{{context}}]:: {{description}}
# - TOML[file]: Tom's Obvious, Minimal Language (file format)
#

requires-python = ">=3.13"
dependencies = [
    "click>=8.0.0",
    "cog>=0.16.7",
    "py7zr>=1.0.0",
    "pytest-cov>=7.0.0",
    "rich>=13.0.0",
    "rich-click>=1.9.1",
    "ruff>=0.13.0",
    "tomli>=2.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.20",
    "mkdocs-include-markdown-plugin>=0.9",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
# addopts = [
#     "--cov=hands_scaphoid",
#     "--cov-report=term-missing",
# ]

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pylint]
disable = [
    "W1203",  # logging-fstring-interpolation
]

[tool.pylint.messages_control]
disable = [
    "W1203",  # logging-fstring-interpolation: Use lazy % formatting in logging functions
]

[tool.ruff]
# Line length to match pylint and your codebase style
line-length = 88
target-version = "py311"

# Enable additional rule sets
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
]

# Disable logging-related checks to match your W1203 disable preference
lint.ignore = [
    "G201",  # Use `.exception()` instead of `.error()` when logging an exception
    "G202",  # Avoid bare `except:` in logging
    # "G203",  # Use lazy % formatting for logging
    # "G204",  # Use lazy % formatting for logging (fstring)
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults (common in Click)
]


# Allow certain patterns observed in your codebase
[tool.ruff.lint.pep8-naming]
# Allow class names with specific suffixes
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.isort]
# Import organization to match your pattern
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = ["hands_scaphoid"]
lines-after-imports = 2

[tool.ruff.format]
# Formatting preferences
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# TODO: add cli commands  ... in sections
[project.scripts]
hands-scaphoid = "hands_scaphoid.main:main"
#extract = "hands_scaphoid.cli:extract"
#compress = "hands_scaphoid.cli:compress"
name: Release

on:
  release:
    types: [published]

jobs:
{% if deploy_to_pypi %}
  deploy-pypi:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '{{ python_version }}'
    
{% if package_manager == "uv" %}
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Build package
      run: |
        uv build
{% elif package_manager == "poetry" %}
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Build package
      run: poetry build
{% else %}
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
{% endif %}
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ "{{ secrets.PYPI_API_TOKEN }}" }}
{% endif %}

{% if deploy_docs and docs_framework == "mkdocs" %}
  deploy-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '{{ python_version }}'
    
{% if package_manager == "uv" %}
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: |
        uv pip install mkdocs mkdocs-material
{% elif package_manager == "poetry" %}
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install
{% else %}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material
{% endif %}
    
    - name: Deploy to GitHub Pages
      run: {% if package_manager == "poetry" %}poetry run {% elif package_manager == "uv" %}uv run {% endif %}mkdocs gh-deploy --force
{% endif %}
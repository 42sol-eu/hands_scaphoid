#!/usr/bin/env python3
"""
{{ class_name }} module for hands-scaphoid package.

{{ description }}
---yaml
File:
    name: {{ filename }}.py
    uuid: {% if uuid %}{{ uuid }}{% else %}generated-uuid-placeholder{% endif %}
    date: {{ current_date }}

Description:
    {{ description }}

Project:
    name: {{ project_name }}
    uuid: {{ project_uuid }}
    url: {{ project_url }}

Authors: ["{{ author }}"]
"""

{% if standard_imports %}
# [Standard library imports]
{% for import in standard_imports.split(',') -%}
import {{ import.strip() }}
{% endfor %}
{% endif %}

{% if local_imports %}
# [Local imports]
{% for import in local_imports.split(',') -%}
from {{ import.strip() }} import *
{% endfor %}
{% endif %}

{% if third_party_imports %}
# [Third party imports]
{% for import in third_party_imports.split(',') -%}
import {{ import.strip() }}
{% endfor %}
{% endif %}

# [Code]

class {{ class_name }}:
    """{{ description }}"""
    
    def __init__(self, name: str, value: str | int, 
                 item_type: str | ItemType = ItemType.ITEM,
                 project: Any = None):
        """Initialize {{ class_name }} instance.
        
        Args:
            name: The name of the item
            value: The value of the item
            item_type: The type of the item
            project: Associated project information
        """
        self._name = name
        self._value = value if isinstance(value, int) else value
        self._item_type = item_type
        if is_instance(project, str):
            project = {{ class_name }}(name=project, value=os.getenv(project, ""), item_type=ItemType.PROJECT)
        self._project = project

    @property
    def name(self) -> str:
        """Get the name of the item."""
        return self._name

    @property
    def value(self) -> str | int:
        """Get the value of the item."""
        return self._value

    @value.setter
    def value(self, new_value: str):
        """Set the value of the item."""
        self._value = new_value

    @property
    def item_type(self) -> ItemType:
        """Get the item type."""
        return self._item_type

    @property
    def project(self) -> '{{ class_name }}':
        """Get project as object."""
        return self._project

    @property
    def project_as_str(self) -> str:
        """Get project as string."""
        return str(self._project) if self._project.value is None else self._project.value()

    @project.setter
    def project(self, new_project: Any):
        """Set the project."""
        if is_instance(new_project, str):
            new_project = {{ class_name }}(name=new_project, value=os.getenv(new_project, ""), item_type=ItemType.PROJECT)
        self._project = new_project

    def __repr__(self) -> str:
        """Return string representation."""
        return f"{{ class_name }}(name={self._name}, value={self._value}, item_type={self._item_type.name})"

    def __str__(self) -> str:
        """Return string format."""
        return f'{self._name}="{self._value}"'

    def to_dict(self) -> dict:
        """Convert to dictionary."""
        return {
            "name": self._name,
            "value": self._value,
            "item_type": self._item_type,
            "project": self._project if self._project else None
        }

    def to_json(self) -> str:
        """Return as JSON."""
        return json.dumps(self.to_dict())

    def to_yaml(self) -> str:
        """Return as YAML."""
        return yaml.safe_dump(self.to_dict())

    def to_toml(self) -> str:
        """Return as TOML."""
        # Manual TOML formatting
        data = self.to_dict()
        toml_lines = []
        for key, value in data.items():
            if value is None:
                toml_lines.append(f'{key} = ""')
            elif isinstance(value, str):
                toml_lines.append(f'{key} = "{value}"')
            elif isinstance(value, (int, float)):
                toml_lines.append(f'{key} = {value}')
            else:
                toml_lines.append(f'{key} = "{str(value)}"')
        return '\n'.join(toml_lines) + '\n'

    def to_env_var(self) -> str:
        """Return as environment variable format."""
        return f"{self._name}={self._value}"

    @classmethod
    def from_dict(cls, data: dict):
        """Create from dictionary."""
        return cls(
            name=data.get("name", ""),
            value=data.get("value", ""),
            item_type=ItemType(data.get("item_type", ItemType.ITEM)),
            project=data.get("project"),
        )

    @classmethod
    def from_json(cls, json_str: str):
        """Create from JSON string."""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_yaml(cls, yaml_str: str):
        """Create from YAML string."""
        data = yaml.safe_load(yaml_str)
        return cls.from_dict(data)

    @classmethod
    def from_env_var(cls, env_var: str):
        """Create from environment variable."""
        value = os.getenv(env_var, "")
        return cls(name=env_var, value=value, item_type=ItemType.VARIABLE)

# [End of file]
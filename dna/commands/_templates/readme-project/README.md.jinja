# {{ project_name }}

{{ project_description }}

{% if has_ci -%}
## 🚀 Status

{% if ci_platform == "github" -%}
[![Tests](https://github.com/{{ repo_owner }}/{{ repo_name }}/workflows/Tests/badge.svg)](https://github.com/{{ repo_owner }}/{{ repo_name }}/actions)
[![Coverage](https://codecov.io/gh/{{ repo_owner }}/{{ repo_name }}/branch/main/graph/badge.svg)](https://codecov.io/gh/{{ repo_owner }}/{{ repo_name }})
[![PyPI version](https://badge.fury.io/py/{{ repo_name }}.svg)](https://badge.fury.io/py/{{ repo_name }})
{% endif -%}
[![Python {{ python_version }}+](https://img.shields.io/badge/python-{{ python_version }}+-blue.svg)](https://www.python.org/downloads/)
[![License: {{ license_type }}](https://img.shields.io/badge/License-{{ license_type }}-yellow.svg)](https://opensource.org/licenses/{{ license_type }})

{% endif -%}
## ✨ Features

{% if has_cli -%}
- 🖥️  **CLI Interface**: Command-line interface for easy automation
{% endif -%}
{% if has_web_interface -%}
- 🌐 **Web Interface**: User-friendly web interface
{% endif -%}
{% if has_api -%}
- 🔌 **API**: RESTful API for integration
{% endif -%}
{% if has_tests -%}
- ✅ **Well Tested**: Comprehensive test suite with {{ test_framework }}
{% endif -%}
{% if has_docs -%}
- 📚 **Documentation**: Complete documentation and examples
{% endif -%}
- 🐍 **Python {{ python_version }}+**: Modern Python with type hints

## 📦 Installation

### Using {{ install_method }}

```bash
{% if install_method == "pip" -%}
pip install {{ repo_name }}
{% elif install_method == "uv" -%}
uv add {{ repo_name }}
{% elif install_method == "conda" -%}
conda install -c conda-forge {{ repo_name }}
{% elif install_method == "poetry" -%}
poetry add {{ repo_name }}
{% endif %}
```

### Development Installation

```bash
# Clone the repository
git clone https://github.com/{{ repo_owner }}/{{ repo_name }}.git
cd {{ repo_name }}

{% if install_method == "pip" -%}
# Install in development mode
pip install -e .[dev]
{% elif install_method == "uv" -%}
# Install in development mode
uv sync --dev
{% elif install_method == "poetry" -%}
# Install dependencies
poetry install
{% endif %}
```

## 🚀 Quick Start

{% if has_cli -%}
### Command Line Usage

```bash
{{ repo_name }} --help
{{ repo_name }} command --option value
```

{% endif -%}
### Python API

```python
from {{ repo_name | replace('-', '_') }} import main_function

# Basic usage
result = main_function()
print(result)

# Advanced usage
result = main_function(
    option1="value1",
    option2="value2"
)
```

{% if has_web_interface -%}
### Web Interface

Start the web server:

```bash
{{ repo_name }} serve --port 8000
```

Then open your browser to `http://localhost:8000`

{% endif -%}
{% if has_api -%}
### API Usage

```python
import requests

# Make API requests
response = requests.get("http://localhost:8000/api/endpoint")
data = response.json()
```

{% endif -%}
## 📖 Documentation

{% if has_docs -%}
Complete documentation is available at: **{{ docs_url }}**

### Quick Links

- [Getting Started]({{ docs_url }}/getting-started/)
- [API Reference]({{ docs_url }}/api/)
- [Examples]({{ docs_url }}/examples/)
- [Contributing]({{ docs_url }}/contributing/)

{% else -%}
Documentation is available in the `docs/` directory.

{% endif -%}
## 🧪 Testing

{% if has_tests -%}
Run the test suite:

```bash
{% if test_framework == "pytest" -%}
# Run all tests
pytest

# Run with coverage
pytest --cov={{ repo_name | replace('-', '_') }} --cov-report=html

# Run specific test file
pytest tests/test_specific.py
{% elif test_framework == "unittest" -%}
# Run all tests
python -m unittest discover tests/

# Run specific test
python -m unittest tests.test_specific
{% endif %}
```

{% endif -%}
## 🤝 Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

### Development Setup

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Make your changes
4. Add tests for your changes
5. Ensure tests pass: `{{ test_framework if has_tests else "python -m unittest" }}`
6. Commit your changes: `git commit -am 'Add feature'`
7. Push to the branch: `git push origin feature-name`
8. Submit a pull request

### Code Style

We use:
- **Black** for code formatting
- **isort** for import sorting
- **flake8** for linting
- **mypy** for type checking

```bash
# Format code
black {{ repo_name | replace('-', '_') }}/
isort {{ repo_name | replace('-', '_') }}/

# Check code
flake8 {{ repo_name | replace('-', '_') }}/
mypy {{ repo_name | replace('-', '_') }}/
```

## 📄 License

This project is licensed under the {{ license_type }} License - see the [LICENSE](LICENSE) file for details.

## 👥 Authors

- **{{ author_name }}** - *Initial work* - [{{ repo_owner }}](https://github.com/{{ repo_owner }})

## 🙏 Acknowledgments

- Thanks to all contributors
- Inspired by similar projects in the Python ecosystem
- Built with ❤️ using Python

## 📧 Support

If you have any questions or need help:

{% if author_email -%}
- 📧 Email: {{ author_email }}
{% endif -%}
- 🐛 [Issue Tracker](https://github.com/{{ repo_owner }}/{{ repo_name }}/issues)
- 💬 [Discussions](https://github.com/{{ repo_owner }}/{{ repo_name }}/discussions)

---

Made with ❤️ by [{{ author_name }}](https://github.com/{{ repo_owner }})
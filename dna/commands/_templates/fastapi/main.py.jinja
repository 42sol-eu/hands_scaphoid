#!/usr/bin/env python3
"""
{{ project_name }} - FastAPI Application

{{ description }}
---yaml
File:
    name: main.py
    uuid: generated-uuid-placeholder
    date: {{ current_date }}

Description:
    {{ description }}

Authors: ["{{ author }}"]
"""

from fastapi import FastAPI{% if use_cors %}, middleware{% endif %}
{% if use_cors -%}
from fastapi.middleware.cors import CORSMiddleware
{% endif -%}
{% if use_rate_limiting -%}
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
{% endif -%}
{% if include_websockets -%}
from fastapi import WebSocket
{% endif -%}
{% if use_database -%}
from contextlib import asynccontextmanager

from .database import engine, create_tables
{% endif -%}
from .routers import {% if use_auth %}auth, {% endif %}items, health
{% if use_database -%}
from .models import Base
{% endif %}

{% if use_rate_limiting -%}
# Rate limiting
limiter = Limiter(key_func=get_remote_address)
{% endif %}

{% if use_database -%}
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan events."""
    # Startup
    create_tables()
    yield
    # Shutdown
    pass

{% endif -%}
# FastAPI app instance
app = FastAPI(
    title="{{ project_name }}",
    description="{{ description }}",
    version="{{ api_version }}",
    docs_url="/docs",
    redoc_url="/redoc",
    {% if use_database -%}
    lifespan=lifespan,
    {% endif -%}
)

{% if use_rate_limiting -%}
# Add rate limiting
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

{% endif -%}
{% if use_cors -%}
# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:8080"],  # Add your frontend URLs
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

{% endif -%}
# Include routers
app.include_router(health.router, prefix="/health", tags=["health"])
{% if use_auth -%}
app.include_router(auth.router, prefix="/{{ api_version }}/auth", tags=["authentication"])
{% endif -%}
app.include_router(items.router, prefix="/{{ api_version }}/items", tags=["items"])

{% if include_websockets -%}
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint for real-time communication."""
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"Message received: {data}")
    except Exception as e:
        print(f"WebSocket error: {e}")
    finally:
        await websocket.close()

{% endif -%}
@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "message": "Welcome to {{ project_name }}",
        "version": "{{ api_version }}",
        "docs": "/docs",
        "health": "/health"
    }


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port={{ port }},
        reload=True,
        log_level="info"
    )

# [End of file]